openapi: 3.0.0
x-stoplight:
  id: zur6c0dxx3z8a
info:
  title: API
  version: '1.0'
  description: Salvation Clinic International Ministries API Documentaion
  contact:
    name: Nana Kwesi Ofosu-Aikins
    email: nanaaikinson24@gmail.com
servers:
  - url: 'https://api.scimapp.org'
    description: ''
  - url: 'https://staging-api.scimapp.org'
    description: ''
tags:
  - name: backoffice
  - name: client
paths:
  /auth/login:
    post:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
      operationId: auth-login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      description: Auth login
  /auth/register:
    post:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      operationId: auth-register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      description: Auth register
    parameters: []
  /auth/resend-email-verification:
    post:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      operationId: auth-resend-email-verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
      description: Auth resend email verification
    parameters: []
  /auth/forgot-password:
    post:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      operationId: auth-forgot-password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
      description: Auth forgot password
    parameters: []
  /auth/refresh-token:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
      operationId: auth-refresh-token
      description: Auth refresh token
      security:
        - X-USER-TOKEN: []
    parameters: []
  /auth/user:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUser'
      operationId: auth-user
      description: 'Auth: Get user'
      security:
        - X-USER-TOKEN: []
    parameters: []
  /podcasts:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPodcastsResponse'
      operationId: get-podcasts
      description: 'Client: Get podcasts'
      parameters:
        - schema:
            type: number
          in: query
          name: limit
        - schema:
            type: number
          in: query
          name: page
        - schema:
            type: string
          in: query
          name: search
        - schema:
            type: string
            enum:
              - newest
              - oldest
          in: query
          name: sort
  /podcasts/all:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPodcastsResponse'
      operationId: get-all-podcasts
      description: 'Client: Get all podcasts'
      parameters:
        - schema:
            type: string
            enum:
              - newest
              - oldest
          in: query
          name: sort
    parameters: []
  '/podcasts/{podcastId}':
    parameters:
      - schema:
          type: string
        name: podcastId
        in: path
        required: true
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Podcast'
      operationId: get-podcast
      description: 'Client: Get podcast'
  '/podcasts/{podcastId}/like':
    parameters:
      - schema:
          type: string
        name: podcastId
        in: path
        required: true
    patch:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
      operationId: like-podcast
      description: 'Client: Like podcast'
      security:
        - X-USER-TOKEN: []
  '/podcasts/{podcastId}/comments':
    parameters:
      - schema:
          type: string
        name: podcastId
        in: path
        required: true
    post:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized
      operationId: comment-podcast
      description: 'Client: Comment on a podcast'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
    get:
      summary: ''
      operationId: get-podcast-comments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsResponse'
      description: 'Client: Get podcast comments'
      tags:
        - client
  '/podcasts/{podcastId}/comment/{commentId}':
    parameters:
      - schema:
          type: string
        name: podcastId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    patch:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized
      operationId: update-podcast-comment
      description: 'Client: Update podcast comment'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
    delete:
      summary: ''
      operationId: delete-podcast-comment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      description: Delete podcast comment
      security:
        - X-USER-TOKEN: []
      tags:
        - client
  /playlists:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistsResponse'
      operationId: get-playlists
      security:
        - X-USER-TOKEN: []
      description: Get playlists
    post:
      summary: ''
      operationId: create-playlist
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorePlaylistRequest'
      tags:
        - client
      description: Create playlist
  '/playlists/{playlistId}':
    parameters:
      - schema:
          type: string
        name: playlistId
        in: path
        required: true
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
      operationId: get-playlist
      description: 'Client: Get playlist'
      security:
        - X-USER-TOKEN: []
    patch:
      summary: ''
      operationId: update-playlist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistResponse'
      description: 'Client: Update playlist'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorePlaylistRequest'
      tags:
        - client
    delete:
      summary: ''
      operationId: delete-playlist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      description: 'Client: Delete playlist'
      security:
        - X-USER-TOKEN: []
      tags:
        - client
  '/playlists/{playlistId}/podcasts':
    parameters:
      - schema:
          type: string
        name: playlistId
        in: path
        required: true
    patch:
      summary: ''
      operationId: delete-playlist-podcasts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - X-USER-TOKEN: []
      tags:
        - client
      description: 'Client: Delete playlist podcasts'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistPodcastsRequest'
    post:
      summary: ''
      operationId: add-playlist-podcasts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      description: 'Client: Add podcasts to playlist'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistPodcastsRequest'
        description: ''
      tags:
        - client
  /prayer-requests:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrayersResponse'
      operationId: get-prayer-requests
      security:
        - X-USER-TOKEN: []
      parameters:
        - schema:
            type: string
            enum:
              - newest
              - oldest
          in: query
          name: sort
      description: 'Client: Get my prayers'
    post:
      summary: ''
      operationId: request-prayer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prayer'
      description: 'Client: Request prayer'
      security:
        - X-USER-TOKEN: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrayerRequest'
      tags:
        - client
  /posts:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsResponse'
      operationId: get-posts
      description: 'Client: get posts'
      parameters:
        - schema:
            type: boolean
          in: query
          name: isAnnouncement
          required: true
  '/posts/{postId}':
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Not Found
      operationId: get-post
      description: 'Client: get post'
    parameters:
      - schema:
          type: string
        name: postId
        in: path
        required: true
  '/posts/{postId}/comments':
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsResponse'
        '404':
          description: Not Found
      operationId: get-post-comments
      description: 'Client: get post comments'
    parameters:
      - schema:
          type: string
        name: postId
        in: path
        required: true
    post:
      summary: ''
      operationId: create-post-comment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      description: 'Client: create post comment'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
        description: ''
      tags:
        - client
  '/posts/{postId}/comments/{commentId}':
    delete:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Not Found
      operationId: delete-post-comment
      description: 'Client: delete post comment'
      security:
        - X-USER-TOKEN: []
    parameters:
      - schema:
          type: string
        name: postId
        in: path
        required: true
      - schema:
          type: string
        name: commentId
        in: path
        required: true
    patch:
      summary: ''
      operationId: update-post-comment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
      description: 'Client: update post comment'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
        description: ''
      tags:
        - client
  /home:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HomeDataResponse'
      operationId: get-home-data
      description: 'Client: Get home data'
  /files/upload:
    post:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
      operationId: upload-file
      description: 'Client: Upload file'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              x-examples:
                Example 1:
                  file: ''
                  uploadType: avatar
              properties:
                file:
                  type: string
                  format: binary
                uploadType:
                  type: string
                  enum:
                    - testimony
                    - excerpt
                    - avatar
              required:
                - file
                - uploadType
  /files/get-url:
    get:
      summary: ''
      tags:
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
      operationId: get-file-url
      parameters:
        - schema:
            type: string
          in: query
          name: key
          required: true
      description: 'Client: Get file url'
  /backoffice/events:
    get:
      summary: ''
      tags:
        - backoffice
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'
      operationId: backoffice-get-events
      description: 'Backoffice: Get events'
      security:
        - X-USER-TOKEN: []
    post:
      summary: ''
      operationId: backoffice-create-event
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      description: 'Backoffcie: Create event'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
      tags:
        - backoffice
  '/backoffice/events/{eventId}':
    get:
      summary: ''
      tags:
        - backoffice
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      operationId: backoffice-get-event
      description: 'Backoffice: Get event'
      security:
        - X-USER-TOKEN: []
    parameters:
      - schema:
          type: string
        name: eventId
        in: path
        required: true
    patch:
      summary: ''
      operationId: backoffice-update-event
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      description: 'Backoffice: Update event'
      security:
        - X-USER-TOKEN: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
      tags:
        - backoffice
    delete:
      summary: ''
      operationId: backoffice-delete-event
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      description: 'Backoffice: Delete event'
      security:
        - X-USER-TOKEN: []
      tags:
        - backoffice
  /backoffice/posts:
    get:
      summary: ''
      tags:
        - backoffice
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsResponse'
      operationId: backoffice-get-posts
      description: 'Backoffice: Get posts'
      security:
        - X-USER-TOKEN: []
      parameters:
        - schema:
            type: boolean
          in: query
          name: isAnnouncement
          required: true
    post:
      summary: ''
      operationId: backoffice-create-post
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      tags:
        - backoffice
      description: 'Backoffice: Create post'
      security:
        - X-USER-TOKEN: []
      parameters:
        - schema:
            type: boolean
          in: query
          name: isAnnouncement
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorePostRequest'
  '/backoffice/posts/{postId}':
    parameters:
      - schema:
          type: string
        name: postId
        in: path
        required: true
    get:
      summary: ''
      tags:
        - backoffice
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      operationId: backoffice-get-post
      description: 'Backoffice: Get post'
      security:
        - X-USER-TOKEN: []
    patch:
      summary: ''
      operationId: backoffice-update-post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      description: 'Backoffice: update post'
      security:
        - X-USER-TOKEN: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorePostRequest'
      tags:
        - backoffice
    delete:
      summary: ''
      operationId: backoffice-delete-post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      tags:
        - backoffice
      description: 'Backoffice: delete post'
      security:
        - X-USER-TOKEN: []
components:
  schemas:
    AuthUser:
      type: object
      x-examples:
        Example 1:
          id: 01HGEMHYJMT832QCWAJMCE67FK
          firstName: Nana
          lastName: Aikinson
          email: nanaaikinson24@example.com
          emailVerified: true
          avatar: null
          channels:
            - web
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        avatar:
          type: string
          nullable: true
        channels:
          type: array
          items:
            type: string
            enum:
              - web
              - mobile
              - backoffice
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
        - avatar
        - channels
    Podcast:
      type: object
      x-examples:
        Example 1:
          id: 01HGDRCWFG6A5ASHQHWZHN4R70
          author: Evangelist Elijah Ben
          title: SUNDAY ANOINTING SERVICE-THE SPIRIT OF UNDERSTANDING PART 2
          description: Message by Evang. Elijah-Ben Kusi Agyapong during Sunday Anointing Service
          duration: '01:33:21'
          imageUrl: 'https://s3.amazonaws.com/podcasts-image-uploads/rev-elijah-ben-scim-6bbd0a95d-large.png'
          audioUrl: 'https://awscdn.podcasts.com/audio-qCgqW7G68X5kJPLaWfZeGp47Z.mp3'
          published: true
          publishedAt: '2023-11-27T07:44:51Z'
      properties:
        id:
          type: string
        author:
          type: string
        title:
          type: string
        description:
          type: string
        duration:
          type: string
        imageUrl:
          type: string
        audioUrl:
          type: string
        published:
          type: boolean
        publishedAt:
          type: string
      required:
        - id
        - author
        - title
        - description
        - duration
        - imageUrl
        - audioUrl
        - published
        - publishedAt
    Playlist:
      type: object
      x-examples:
        Example 1:
          id: 01HGN0RK7FYJH596PE0X8TTZH1
          title: Honour
          shortUrl: null
          description: ''
          createdAt: '2023-12-02T10:21:38.415726Z'
          podcasts:
            - id: 01HGN0RK7GKJ3MXARR598PN0DG
              author: Evangelist Elijah Ben
              title: 'SCIM UK Stages of honour and dishonour '
              summary: 'Render therefore to all their dues: tribute to whom tribute is due; custom to whom custom; fear to whom fear; honour to whom honour. Romans 13:7'
              description: 'Render therefore to all their dues: tribute to whom tribute is due; custom to whom custom; fear to whom fear; honour to whom honour. Romans 13:7'
              duration: '82:43'
              imageUrl: 'https://s3.amazonaws.com/podcasts-image-uploads/rev-elijah-ben-scim-6bbd0a95d-large.png'
              audioUrl: 'http://awscdn.podcasts.com/SCIM-UK-Stages-of-honour-and-dishonour--eebe.mp3'
              published: true
              publishedAt: '2020-10-19T13:54:06Z'
            - id: 01HGN0RK7GKJ3MXARR59WXVF1F
              author: Evangelist Elijah Ben
              title: Those Who Dishonour / Signs of Dishonour
              summary: 'ROMANS 13:7Render therefore to all their dues: tribute to whom tribute is due; custom to whom custom; fearto whom fear; honour to whom honour.'
              description: 'ROMANS 13:7Render therefore to all their dues: tribute to whom tribute is due; custom to whom custom; fearto whom fear; honour to whom honour.'
              duration: '93:39'
              imageUrl: 'https://s3.amazonaws.com/podcasts-image-uploads/rev-elijah-ben-scim-6bbd0a95d-large.png'
              audioUrl: 'http://awscdn.podcasts.com/Those-Who-Dishonour-Signs-of-Dishonour-d3e1.mp3'
              published: true
              publishedAt: '2020-10-19T08:02:37Z'
      properties:
        id:
          type: string
        title:
          type: string
        shortUrl:
          type: string
          nullable: true
        description:
          type: string
        createdAt:
          type: string
        podcasts:
          $ref: '#/components/schemas/Podcast'
      required:
        - id
        - title
        - shortUrl
        - description
        - createdAt
        - podcasts
    Prayer:
      type: object
      x-examples:
        Example 1:
          id: 01HH45VD7HQJWGG5ZEQNDY1YN4
          title: This is a test 4
          description: This is a test description
          completedAt: null
          createdAt: '2023-12-08T07:39:09.937651Z'
          user:
            id: 01HH1KGM9S1H086GV1EGPFP16X
            firstName: Nana
            lastName: Aikinson
            email: nanaaikinson24@example.com
            emailVerified: true
            avatar: 'https://scimapp-test-uploads.s3.eu-west-1.amazonaws.com/AVATAR/c5wlQgTksTLGkMLhA55gMCOenWPqo4.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAW3W3GZGQ66DHX5JB%2F20231207%2Feu-west-1%2Fs3%2Faws4_request&X-Amz-Date=20231207T222154Z&X-Amz-Expires=604800&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=f9140b24726dc7c625df3638a667ab143ecb98b522e0bc41ddfc76b27fbbfd31'
            channels:
              - web
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        completedAt:
          type: string
          nullable: true
        createdAt:
          type: string
        status:
          type: string
          x-stoplight:
            id: 9brcin5hlkla3
          enum:
            - fulfilled
            - pending
            - rejected
        user:
          $ref: '#/components/schemas/AuthUser'
      required:
        - id
        - title
        - description
        - completedAt
        - createdAt
        - user
        - status
    Event:
      type: object
      x-examples: {}
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        excerptImage:
          type: string
        location:
          type: string
        startDateTime:
          type: string
        endDateTime:
          type: string
        published:
          type: boolean
        createdAt:
          type: string
      required:
        - id
        - title
        - description
        - excerptImage
        - location
        - startDateTime
        - endDateTime
        - published
        - createdAt
    Comment:
      type: object
      x-examples:
        Example 1:
          id: 01HGTH4JBT0KMPYW4KD505SAS0
          body: Lorem ipsum 3
          createdAt: '2023-12-04T13:44:00.122063Z'
          user:
            id: 01HGHB89XH660W6HDM3FWBAEVB
            firstName: Nana
            lastName: Aikinson
            email: nanaaikinson24@example.com
            emailVerified: true
            avatar: null
            channels:
              - web
      properties:
        id:
          type: string
        body:
          type: string
        createdAt:
          type: string
        user:
          $ref: '#/components/schemas/AuthUser'
      required:
        - id
        - body
        - createdAt
        - user
    LoginRequest:
      type: object
      x-examples:
        Example 1:
          email: nanaaikinson24@example.com
          password: Pa$$w0rd
          channel: web
      properties:
        email:
          type: string
        password:
          type: string
        channel:
          type: string
          enum:
            - web
            - mobile
      required:
        - email
        - password
        - channel
    RegisterRequest:
      type: object
      x-examples:
        Example 1:
          firstName: Nana
          lastName: Aikinson
          email: nanaaikinson24@example.com
          password: Pa$$w0rd
          channel: web
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        channel:
          type: string
          enum:
            - web
            - mobile
      required:
        - firstName
        - lastName
        - email
        - password
        - channel
    CommentRequest:
      title: CommentRequest
      x-stoplight:
        id: ot54uyydj0o5x
      type: object
      properties:
        comment:
          type: string
          x-stoplight:
            id: s7t58bujmz14n
      required:
        - comment
    MessageResponse:
      title: MessageResponse
      x-stoplight:
        id: gmf8yx586fcto
      type: object
      properties:
        message:
          type: string
          x-stoplight:
            id: 5qg0odxm3vfca
      required:
        - message
    GetPodcastResponse:
      $ref: '#/components/schemas/Podcast'
    GetPodcastsResponse:
      title: GetPodcastsResponse
      x-stoplight:
        id: ep2dcbt7zbrt9
      type: array
      items:
        $ref: '#/components/schemas/Podcast'
    LoginResponse:
      type: object
      x-examples:
        Example 1:
          tokens:
            access: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDE5OTU0NjQsImlhdCI6MTcwMTk5MTg2NCwiaXNzIjoiY29tLnNjaW0uYXBwIiwicmVmZXJlbmNlIjoiMDFISDM5WFBEM1BLN0s5MkJNUEpEQzNWWVciLCJzdWIiOiIwMUhIMUtHTTlTMUgwODZHVjFFR1BGUDE2WCIsInRva2VuVHlwZSI6ImFjY2VzcyJ9.7P8hNDG-Ca74jVGVWPXXTmTWdQHKFHPfHtXWdjSrzb0
            refresh: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDIwNzgyNjQsImlhdCI6MTcwMTk5MTg2NCwiaXNzIjoiY29tLnNjaW0uYXBwIiwicmVmZXJlbmNlIjoiMDFISDM5WFBEM1BLN0s5MkJNUEpEQzNWWVciLCJzdWIiOiIwMUhIMUtHTTlTMUgwODZHVjFFR1BGUDE2WCIsInRva2VuVHlwZSI6InJlZnJlc2gifQ.jJ68fSWIJQ9Is10CcfO1EvGkZxOBFpJ7wDgKeX7nCHk
          user:
            id: 01HH1KGM9S1H086GV1EGPFP16X
            firstName: Nana
            lastName: Aikinson
            email: nanaaikinson24@example.com
            emailVerified: true
            avatar: ''
            channels:
              - web
      properties:
        tokens:
          type: object
          required:
            - access
            - refresh
          properties:
            access:
              type: string
            refresh:
              type: string
        user:
          $ref: '#/components/schemas/AuthUser'
      required:
        - tokens
        - user
    RefreshTokenResponse:
      type: object
      x-examples:
        Example 1:
          access: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDE5OTU2NjksImlhdCI6MTcwMTk5MjA2OSwiaXNzIjoiY29tLnNjaW0uYXBwIiwicmVmZXJlbmNlIjoiMDFISDNBM1hZUjBSWTdURTE1WkFIWDlCWUIiLCJzdWIiOiIwMUhIMUtHTTlTMUgwODZHVjFFR1BGUDE2WCIsInRva2VuVHlwZSI6ImFjY2VzcyJ9.ymFGjD7xGgHU1rfaUbZyUcjD9Nrh3odTifE4TzOJ1To
      properties:
        access:
          type: string
      required:
        - access
    PlaylistsResponse:
      type: array
      x-stoplight:
        id: b4m86sg966ryt
      x-examples: {}
      items:
        $ref: '#/components/schemas/Playlist'
    PlaylistResponse:
      $ref: '#/components/schemas/Playlist'
    PrayersResponse:
      type: array
      x-stoplight:
        id: y4qcmdcl1n787
      x-examples:
        Example 1:
          code: 200
          data:
            - id: 01HGRFM7M1F03D6014034KEF2P
              title: This is a test
              description: This is a test description
              completedAt: null
              createdAt: '2023-12-03T18:39:07.393849Z'
      items:
        $ref: '#/components/schemas/Prayer'
    CommentsResponse:
      type: array
      x-stoplight:
        id: f043d02f509bc
      x-examples:
        Example 1:
          - id: 01HGTH4JBT0KMPYW4KD505SAS0
            body: Lorem ipsum 3
            createdAt: '2023-12-04T13:44:00.122063Z'
            user:
              id: 01HGHB89XH660W6HDM3FWBAEVB
              firstName: Nana
              lastName: Aikinson
              email: nanaaikinson24@example.com
              emailVerified: true
              avatar: null
              channels:
                - web
      items:
        $ref: '#/components/schemas/Comment'
    EmailRequest:
      title: EmailRequest
      x-stoplight:
        id: 5fu8dtlpj6ocv
      type: object
      properties:
        email:
          type: string
          x-stoplight:
            id: 5awcv9b192ctu
      required:
        - email
    StorePlaylistRequest:
      type: object
      x-examples:
        Example 1:
          title: Honour
          description: ''
          podcasts:
            - 01HGHB7QZKWWX8VQD4KZ1DRMRX
            - 01HGHB7QZMR2T5YB9W9YYAPQKC
      properties:
        title:
          type: string
        description:
          type: string
        podcasts:
          type: array
          items:
            type: string
      required:
        - title
        - description
    PrayerRequest:
      type: object
      x-examples:
        Example 1:
          title: This is a test
          description: This is a test description
      properties:
        title:
          type: string
        description:
          type: string
        phoneNumber:
          type: string
          x-stoplight:
            id: itjqecfffw1l6
        countryCode:
          type: string
          x-stoplight:
            id: orgxyeb8y3gb1
      required:
        - title
        - description
        - phoneNumber
        - countryCode
    HomeDataResponse:
      type: object
      x-examples:
        Example 1:
          latestAnnouncements: []
          latestPodcasts:
            - id: 01HH1KDHJWQAA7JHK8RNK2TWM2
              author: Evangelist Elijah Ben
              title: UNDERSTANDING JUDGEMENT
              description: 'Praise him family You are listening to our Tuesday Teaching service, on Tuesday 28th November Message: Understanding Judgment Main scripture: Daniel 5:24-27Preached by: Evangelist Elijah-Ben Kusi-Agyapong This is only a brief, highlighted summary of the first of our father''s three main lessons for us in today''s message. Watch out for the remaining points, and don''t forget to leave a comment on what you took away from this message, like it, and share it with a friend.1 John 5:16-171. Accursed sins: sins that bring curses.l) idolatry Deut 27:15 you can make modern things an idol eg. money, your bodyIl) sin of not honouring your mother and father Deut 27:16III) the sin of being a cheat, not honest Deut 27:17 Malachi 3:8IV) the sin of wickedness to the handicapped and weak Deut 27:18-19 Particularly the aged, widows, orphans, strangersV) the sin of dishonoring fathers Deut 27:20VI) the sin of beastialityVII) the sin of incest Deut 27:22VIII) the sin of deception Deut 27:24VIIII) The sin of stealing Zechariah 5:3-4,X) The sin of ignoring the law, not listening and doing the word of God Deut 27:26'
              duration: '01:30:44'
              imageUrl: 'https://s3.amazonaws.com/podcasts-image-uploads/understanding-judgement-1400x1400.jpg'
              audioUrl: 'https://awscdn.podcasts.com/audio-LfrijFKTjwmKImDAvQgxZxbbq.mp3'
              published: true
              publishedAt: '2023-11-29T07:10:55Z'
            - id: 01HH1KDHJZ5XXT28AS2S52VF5E
              author: Evangelist Elijah Ben
              title: UNDERSTANDING TEMPTATION
              description: 'Praise him&nbsp;familyYou are&nbsp;listening to our SCIM Before Day Break Prayers on Wednesday 29th November 2023Message: THE UNDERSTANDING TEMPTATIONSMain scripture: 1 Corinthians 10:13Preached by:&nbsp;Evangelist Elijah Ben Kusi-Agyapong'
              duration: '00:50:10'
              imageUrl: 'https://s3.amazonaws.com/podcasts-image-uploads/understanding-temptation-1400x1400.jpg'
              audioUrl: 'https://awscdn.podcasts.com/audio-uHdynti48r5N94ZS1gZ1C39tQ.mp3'
              published: true
              publishedAt: '2023-11-29T06:44:37Z'
            - id: 01HH1KDHK0D814C9C5SHT94G4B
              author: Evangelist Elijah Ben
              title: SUNDAY ANOINTING SERVICE-THE SPIRIT OF UNDERSTANDING PART 2
              description: Message by Evang. Elijah-Ben Kusi Agyapong during Sunday Anointing Service
              duration: '01:33:21'
              imageUrl: 'https://s3.amazonaws.com/podcasts-image-uploads/rev-elijah-ben-scim-6bbd0a95d-1400x1400.jpg'
              audioUrl: 'https://awscdn.podcasts.com/audio-qCgqW7G68X5kJPLaWfZeGp47Z.mp3'
              published: true
              publishedAt: '2023-11-27T07:44:51Z'
            - id: 01HH1KDHK13DDW12YBN2GY9WHJ
              author: Evangelist Elijah Ben
              title: B4DBP - WHO IS YOUR COUNSEL?
              description: 'Shared with PublicB4DBP - Who is your Counsel?Praise him Family, You are watching SCIM B4DP, on Monday 27th November&nbsp;2Message: Who are the people that are counselling you?This is a continuation of the message that our father has been preaching on the 7 Dimensions of the Holy Spirit.1. THE SPIRIT OF THE LORD2. THE SPIRIT OF WISDOM3. THE SPIRIT OF UNDERSTANDING4. THE SPIRIT OF COUNSEL5. THE SPIRIT OF MIGHT6. THE SPIRIT OF KNOWLEDGE7. THE SPIRIT OF THE FEAR OF THE LORD'
              duration: '00:43:52'
              imageUrl: 'https://s3.amazonaws.com/podcasts-image-uploads/rev-elijah-ben-scim-6bbd0a95d-1400x1400.jpg'
              audioUrl: 'https://awscdn.podcasts.com/audio-rH0qjoSL76eqceQYyJMPTL9EY.mp3'
              published: true
              publishedAt: '2023-11-27T07:01:47Z'
            - id: 01HH1KDHK2Y0NHKF781PVEZE61
              author: Evangelist Elijah Ben
              title: THE SPIRIT OF UNDERSTANDING
              description: Message by Evang. Elijah-Ben Kusi Agyapong during Tuesday Teaching Service
              duration: '01:35:16'
              imageUrl: 'https://s3.amazonaws.com/podcasts-image-uploads/rev-elijah-ben-scim-6bbd0a95d-1400x1400.jpg'
              audioUrl: 'https://awscdn.podcasts.com/audio-F9RWjXUc39lIgJuaKFg4oPSvG.mp3'
              published: true
              publishedAt: '2023-11-21T21:16:12Z'
          latestPosts: []
          upcomingEvents: []
      properties:
        latestAnnouncements:
          type: array
          items:
            type: object
        latestPodcasts:
          type: array
          items:
            $ref: '#/components/schemas/Podcast'
        latestPosts:
          type: array
          items:
            type: object
        upcomingEvents:
          type: array
          items:
            type: object
      required:
        - latestAnnouncements
        - latestPodcasts
        - latestPosts
        - upcomingEvents
    FileResponse:
      type: object
      x-examples:
        Example 1:
          key: AVATAR/w6lG4ZUMcJ3DGMMXI27RW3VhZUT3BF.jpeg
          url: 'https://scimapp-test-uploads.s3.eu-west-1.amazonaws.com/AVATAR/w6lG4ZUMcJ3DGMMXI27RW3VhZUT3BF.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAW3W3GZGQ66DHX5JB%2F20231206%2Feu-west-1%2Fs3%2Faws4_request&X-Amz-Date=20231206T214742Z&X-Amz-Expires=604800&X-Amz-SignedHeaders=host&x-id=GetObject&X-Amz-Signature=59faf96a872cb412eedf345a0874c5323874afbbf08d3452b230afffc1ef25a1'
      properties:
        key:
          type: string
        url:
          type: string
      required:
        - key
        - url
    PlaylistPodcastsRequest:
      type: object
      x-examples:
        Example 1:
          podcasts: []
      properties:
        podcasts:
          type: array
          items:
            type: string
      required:
        - podcasts
    EventsResponse:
      type: object
      x-stoplight:
        id: 09td3cquu09hj
      x-examples:
        Example 1:
          items:
            - id: 01HHAM7SDVSZBX67XBJWC4F8G6
              title: Test event 3
              description: Test description
              excerptImage: ''
              location: test location 2
              startDateTime: '0000-12-31T23:43:52-00:16'
              endDateTime: '0000-12-31T23:43:52-00:16'
              published: false
              createdAt: '2023-12-10T19:46:02.299722Z'
            - id: 01HHAM7SDZJNN74F3HN0ZSCFX9
              title: Test event 3
              description: Test description
              excerptImage: ''
              location: test location 2
              startDateTime: '0000-12-31T23:43:52-00:16'
              endDateTime: '0000-12-31T23:43:52-00:16'
              published: false
              createdAt: '2023-12-10T19:46:02.303918Z'
            - id: 01HHAM7SECNFH1VJWHH6E8ZDVD
              title: Test event 3
              description: Test description
              excerptImage: ''
              location: test location 2
              startDateTime: '0000-12-31T23:43:52-00:16'
              endDateTime: '0000-12-31T23:43:52-00:16'
              published: false
              createdAt: '2023-12-10T19:46:02.31655Z'
            - id: 01HHAM7SM3KXJZEAY4ZS41ZF2J
              title: Test event 3
              description: Test description
              excerptImage: ''
              location: test location 2
              startDateTime: '0000-12-31T23:43:52-00:16'
              endDateTime: '0000-12-31T23:43:52-00:16'
              published: false
              createdAt: '2023-12-10T19:46:02.499953Z'
          limit: 10
          page: 2
          total: 14
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        limit:
          type: integer
        page:
          type: integer
        total:
          type: integer
      required:
        - items
        - limit
        - page
        - total
      title: ''
    EventRequest:
      type: object
      x-examples:
        Example 1:
          title: Test event 4
          description: Test description
          location: test location 2
          startDateTime: '2023-12-21T21:00:00.000Z'
          endDateTime: '2024-01-01T02:00:00.000Z'
          excerptImage: AVATAR/w6lG4ZUMcJ3DGMMXI27RW3VhZUT3BF.jpeg
      properties:
        title:
          type: string
        description:
          type: string
        location:
          type: string
        startDateTime:
          type: string
        endDateTime:
          type: string
        excerptImage:
          type: string
      required:
        - title
        - description
        - location
        - startDateTime
        - endDateTime
    Post:
      type: object
      x-examples:
        Example 1:
          id: 01HHH61PCD95D8PCAFDWH54E1P
          title: Test post
          slug: test-post
          body: Test body
          published: true
          excerptImage: ''
          isAnnouncement: false
          minutesToRead: 1.5
          createdAt: '2023-12-13T08:52:43.533Z'
          user:
            id: 01HHH5M48X7QR4TMPMT5DFHGQ8
            firstName: Nana
            lastName: Aikinson
            email: nanaaikinson24@gmail.com
            emailVerified: true
            avatar: ''
            channels:
              - mobile
          likesCount: 0
          commentsCount: 0
      properties:
        id:
          type: string
        title:
          type: string
        slug:
          type: string
        body:
          type: string
        published:
          type: boolean
        excerptImage:
          type: string
        isAnnouncement:
          type: boolean
        minutesToRead:
          type: number
        createdAt:
          type: string
        user:
          $ref: '#/components/schemas/AuthUser'
        likesCount:
          type: integer
        commentsCount:
          type: integer
      required:
        - id
        - title
        - slug
        - body
        - published
        - excerptImage
        - isAnnouncement
        - minutesToRead
        - createdAt
        - user
        - likesCount
        - commentsCount
    PostsResponse:
      type: object
      x-examples:
        Example 1:
          items:
            - id: 01HHH61PCD95D8PCAFDWH54E1P
              title: Test post
              slug: test-post
              body: Test body
              published: true
              excerptImage: ''
              isAnnouncement: false
              minutesToRead: 1.5
              createdAt: '2023-12-13T08:52:43.533Z'
              user:
                id: 01HHH5M48X7QR4TMPMT5DFHGQ8
                firstName: Nana
                lastName: Aikinson
                email: nanaaikinson24@gmail.com
                emailVerified: true
                avatar: ''
                channels:
                  - mobile
              likesCount: 0
              commentsCount: 0
            - id: 01HHH67MND3FCHSDVH65PMPQ4R
              title: Test post 2
              slug: test-post-2
              body: Test body
              published: true
              excerptImage: ''
              isAnnouncement: false
              minutesToRead: 1.5
              createdAt: '2023-12-13T08:55:58.382Z'
              user:
                id: 01HHH5M48X7QR4TMPMT5DFHGQ8
                firstName: Nana
                lastName: Aikinson
                email: nanaaikinson24@gmail.com
                emailVerified: true
                avatar: ''
                channels:
                  - mobile
              likesCount: 0
              commentsCount: 0
            - id: 01HHH69D5C0QVQH6WYVVDF0AB5
              title: Test post 3
              slug: test-post-3
              body: Test body
              published: true
              excerptImage: ''
              isAnnouncement: false
              minutesToRead: 1.5
              createdAt: '2023-12-13T08:56:56.236Z'
              user:
                id: 01HHH5M48X7QR4TMPMT5DFHGQ8
                firstName: Nana
                lastName: Aikinson
                email: nanaaikinson24@gmail.com
                emailVerified: true
                avatar: ''
                channels:
                  - mobile
              likesCount: 0
              commentsCount: 0
          limit: 10
          page: 1
          total: 3
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        limit:
          type: integer
        page:
          type: integer
        total:
          type: integer
      required:
        - items
        - limit
        - page
        - total
    StorePostRequest:
      type: object
      x-examples:
        Example 1:
          title: Test post 3
          body: Test body
          published: true
          minutesToRead: 1.5
          excerptImageUrl: ''
      properties:
        title:
          type: string
        body:
          type: string
        published:
          type: boolean
        minutesToRead:
          type: number
        excerptImage:
          type: string
          x-stoplight:
            id: hyjedg14jniru
      required:
        - title
        - body
        - published
        - minutesToRead
  securitySchemes:
    X-USER-TOKEN:
      type: apiKey
      in: header
      name: X-USER-TOKEN
x-internal: false
